package webService;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.ws.rs.GET;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;  
import org.json.JSONObject;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;


/* receive GET & POST requests from http://localhost:8080/RestfulService/API/restService */
@Path("/restService")
public class WebService {

    /* receive json data & search in mysql with it */
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public Response json_restResponse(InputStream incomingData) {
        // json receiving variables
        String receivedString = "";
        JSONObject receivedJson = null;

        // configuration of data source connection 
        String driver = "com.mysql.jdbc.Driver";  
        String url = "jdbc:mysql://127.0.0.1:3306/Library";  
        String usr = "root";
        String pwd = "123456";

        // connection variables
        PreparedStatement stmt = null;
        Connection conn = null;

        // temp variables
        // returnCode will be send to client and be present in the console view
        String returnCode = "SEARCH PROGRESS & RESULTS:";

        // receive the json data as receivedJson(JSONObject)
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(incomingData));
            String line = null;
            while ((line = in.readLine()) != null) {
                receivedString += line;
            }
            try {
                receivedJson = new JSONObject(receivedString);
                returnCode += "\n\n- receive json data successfully...";
            } catch (JSONException e){
                System.out.println("Error new Json - ");
            }
        } catch (Exception e) {
            System.out.println("Error Parsing: - ");
        }

        // load JDBC driver
        try {
            Class.forName(driver).newInstance();
            returnCode += "\n\n- the driver is on...";
        } catch(Exception e) {
            e.printStackTrace();
        }

        // connect to mysql database "Library" and search for book with "title" = "Stardust"
        try {
            conn = (Connection) DriverManager.getConnection(url, usr, pwd);
            stmt = (PreparedStatement) conn.prepareStatement("select * from Book");

            returnCode += "\n\n- 'select * from Book' is executed successfully...";

            // A table of data representing a database result set, which is
            // usually generated by executing a statement that queries the
            // database.
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                returnCode += ("\n\ntitle:\t" + rs.getString("title"));
                if (rs.getString("title").equals(receivedJson.getString("title"))) {
                    returnCode += "\t-that's it!";
                } else {
                    returnCode += ("\t-not the one I'm finding..." + rs.getString("title"));
                }
            }
        }
        catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {
            // Close Statement and Connection
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }

        return Response.status(200).entity(returnCode).build();
    }

    /* receive the GET requests & test whether the server is on */
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String sayPlainTextHello() {
        String returnCode = "this is a test~";

        JpaHandle.showTitle();

        return returnCode;
    }
}